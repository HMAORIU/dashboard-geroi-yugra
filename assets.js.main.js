// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let allData = [];
const defaultCols = {
  fio: ['fio', '—Ñ–∏–æ', 'user', '–∏–º—è', '—Ñ–∞–º–∏–ª–∏—è'],
  city: ['–º–µ—Å—Ç–æ', '–≥–æ—Ä–æ–¥', 'registration', '–∞–¥—Ä–µ—Å', '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ'],
  birth: ['–¥–∞—Ç–∞', '—Ä–æ–∂–¥–µ–Ω–∏—è', '–≤–æ–∑—Ä–∞—Å—Ç', 'birthday'],
  docs: ['–¥–æ–∫—É–º–µ–Ω—Ç', '–∑–∞–≥—Ä—É–∑', '–ø–æ–¥–≥—Ä—É–∂', '–¥–∏–ø–ª–æ–º', '–ø–∞—Å–ø–æ—Ä—Ç'],
  education: ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω', '—É—á–µ–±', 'edu', '–≤—ã—Å—à–µ–µ'],
  branch: ['–≤–æ–π—Å–∫', '–ø–æ–¥—Ä–∞–∑–¥–µ–ª', 'military', '—Ä–æ—Ç–∞', '–±–∞—Ç–∞–ª—å–æ–Ω'],
  rank: ['–∑–≤–∞–Ω–∏–µ', 'rank', '–ª–µ–π—Ç–µ–Ω–∞–Ω—Ç', '—Å–µ—Ä–∂–∞–Ω—Ç'],
  sector: ['—Å—Ñ–µ—Ä–∞', '–¥–µ—è—Ç–µ–ª', 'activity', '—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è'],
  position: ['–¥–æ–ª–∂–Ω', 'position', '—Ä–∞–±–æ—Ç–∞', '—Ç–µ–∫—É—â–∞—è'],
  motivation: ['–º–æ—Ç–∏–≤', '—Ü–µ–ª—å', '–ø–ª–∞–Ω', '–∏–¥–µ—è', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–ø—Ä–∏—á–∏–Ω–∞'],
  injury: ['—Ç—Ä–∞–≤–º', '—Ä–∞–Ω–µ–Ω', '–∑–¥–æ—Ä–æ–≤', '–∫–æ–Ω—Ç—É–∑', '–¥–∏–∞–≥–Ω–æ–∑'],
  telegram: ['—Ç–µ–ª–µ–≥', 'tg', 'telegram', 't.me']
};

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const dropZone = document.getElementById('dropZone');
const fileInput = document.getElementById('fileInput');
const processBtn = document.getElementById('processBtn');
const progressContainer = document.getElementById('progressContainer');
const progressBar = document.getElementById('progressBar');

// Drag & Drop
dropZone.addEventListener('click', () => fileInput.click());

fileInput.addEventListener('change', function () {
  if (this.files.length > 0) {
    dropZone.classList.add('success');
    processBtn.disabled = false;
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    fileInput.dispatchEvent(new Event('input'));
  }
});

dropZone.addEventListener('dragover', e => {
  e.preventDefault();
  dropZone.style.backgroundColor = '#cfe2ff';
});

dropZone.addEventListener('dragleave', () => {
  dropZone.style.backgroundColor = '#e9ecef';
});

dropZone.addEventListener('drop', e => {
  e.preventDefault();
  dropZone.style.backgroundColor = '#e9ecef';
  if (e.dataTransfer.files.length > 0) {
    fileInput.files = e.dataTransfer.files;
    dropZone.classList.add('success');
    processBtn.disabled = false;
    fileInput.dispatchEvent(new Event('input'));
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
processBtn.addEventListener('click', () => {
  const file = fileInput.files[0];
  if (!file) return;

  progressContainer.style.display = 'block';
  progressBar.style.width = '20%';

  setTimeout(() => { progressBar.style.width = '50%'; }, 300);
  setTimeout(() => { progressBar.style.width = '80%'; }, 600);

  const reader = new FileReader();
  reader.onload = function(e) {
    setTimeout(() => { progressBar.style.width = '100%'; }, 800);

    const binaryStr = e.target.result;
    const workbook = XLSX.read(binaryStr, { type: 'binary' });
    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

    if (jsonData.length < 2) {
      alert("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö.");
      return;
    }

    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    const headers = jsonData[0].map(h => String(h || '').toLowerCase());
    const cols = {};
    for (const [key, keywords] of Object.entries(defaultCols)) {
      cols[key] = headers.findIndex(h => keywords.some(k => h.includes(k)));
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫
    const parsed = jsonData.slice(1).map(row => {
      const item = {};
      Object.keys(cols).forEach(key => {
        const idx = cols[key];
        item[key] = idx >= 0 && row[idx] ? String(row[idx]).trim() : '';
      });
      item.raw = row;
      return item;
    }).filter(p => p.fio);

    allData = parsed;
    localStorage.setItem('heroData', JSON.stringify(allData));

    setTimeout(() => {
      renderDashboard(allData);
    }, 1000);
  };
  reader.readAsBinaryString(file);
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
window.onload = () => {
  const saved = localStorage.getItem('heroData');
  if (saved) {
    try {
      allData = JSON.parse(saved);
      renderDashboard(allData);
      if (document.getElementById('dropZone')) {
        document.getElementById('dropZone').classList.add('success');
        document.getElementById('processBtn').disabled = false;
      }
    } catch (e) {
      console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage", e);
    }
  }
};

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
function renderDashboard(data) {
  progressContainer.style.display = 'none';
  document.getElementById('dashboard').style.display = 'block';

  const total = data.length;
  document.getElementById('total').textContent = total;

  const withDocs = data.filter(p => p.docs.toLowerCase().includes('–¥–∞')).length;
  document.getElementById('withDocs').textContent = withDocs;

  const ages = data
    .filter(p => p.birth)
    .map(p => {
      const dob = new Date(p.birth);
      return new Date().getFullYear() - dob.getFullYear();
    })
    .filter(age => age > 15 && age < 80);
  const avgAge = ages.length ? (ages.reduce((a, b) => a + b, 0) / ages.length).toFixed(1) : '‚Äî';
  document.getElementById('avgAge').textContent = avgAge + ' –ª–µ—Ç';

  const highEdu = data.filter(p => p.education.toLowerCase().includes('–≤—ã—Å—à–µ–µ')).length;
  document.getElementById('highEdu').textContent = highEdu;

  // –¢–∞–±–ª–∏—Ü–∞
  const tbody = document.getElementById('tableBody');
  tbody.innerHTML = '';
  data.forEach((p, i) => {
    const tr = document.createElement('tr');
    tr.className = 'participant-row';
    tr.innerHTML = `
      <td>${p.fio}</td>
      <td>${p.city}</td>
      <td>${ages[i] || '‚Äî'}</td>
      <td>${p.branch}</td>
      <td>${p.position}</td>
    `;
    tr.onclick = () => showDetail(p);
    tbody.appendChild(tr);
  });

  // –ü–æ–∏—Å–∫
  document.querySelectorAll('#searchFio, #searchCity, #searchBranch, #searchPosition').forEach(input => {
    input.addEventListener('input', filterTable);
  });

  function filterTable() {
    const fio = document.getElementById('searchFio').value.toLowerCase();
    const city = document.getElementById('searchCity').value.toLowerCase();
    const branch = document.getElementById('searchBranch').value.toLowerCase();
    const pos = document.getElementById('searchPosition').value.toLowerCase();

    Array.from(tbody.children).forEach(tr => {
      const text = tr.textContent.toLowerCase();
      const match = (!fio || text.includes(fio)) &&
                    (!city || text.includes(city)) &&
                    (!branch || text.includes(branch)) &&
                    (!pos || text.includes(pos));
      tr.style.display = match ? '' : 'none';
    });
  }

  // –ì—Ä–∞—Ñ–∏–∫–∏
  updateChart('docsChart', 'pie', ['–° –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏', '–ë–µ–∑'], [withDocs, total - withDocs], ['#5CB85C', '#D9534F']);
  updateChart('eduChart', 'doughnut', ['–í—ã—Å—à–µ–µ', '–î—Ä—É–≥–æ–µ'], [highEdu, total - highEdu], ['#337AB7', '#F0AD4E']);

  const cities = count(data, 'city');
  updateChart('citiesChart', 'bar', Object.keys(cities), Object.values(cities), ['#1976D2']);

  const branches = count(data, 'branch');
  updateChart('branchChart', 'pie', Object.keys(branches), Object.values(branches), ['#D32F2F', '#1976D2', '#0288D1', '#388E3C']);

  // AI-–∞–Ω–∞–ª–∏–∑
  analyzeMotivations(data);
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
function updateChart(id, type, labels, data, colors) {
  const ctx = document.getElementById(id);
  if (ctx.chart) ctx.chart.destroy();
  new Chart(ctx, {
    type: type,
    data: {
      labels: labels,
      datasets: [{ data: data, backgroundColor: colors }]
    },
    options: { responsive: true }
  });
}

// –ü–æ–¥—Å—á—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–π
function count(arr, key) {
  const map = {};
  arr.forEach(p => {
    if (p[key]) {
      const clean = p[key].replace(/\[\d+\]/g, '').trim();
      map[clean] = (map[clean] || 0) + 1;
    }
  });
  return map;
}

// AI-–∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Yandex GPT (—á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ–∫—Å–∏)
async function analyzeMotivations(data) {
  const container = document.getElementById('aiTagsContainer');
  container.innerHTML = '<p>üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Yandex GPT...</p>';

  const texts = data